def @main(%serving_default_input:0: Tensor[(1, 1, 28, 28), float32] /* span=serving_default_input:0:0:0 */, %v_param_1: Tensor[(5, 5, 1, 6), int8] /* span=convolution:0:0 */, %v_param_2: Tensor[(6), int32] /* span=Const_8:0:0 */, %v_param_3: Tensor[(5, 5, 6, 16), int8] /* span=convolution_1:0:0 */, %v_param_4: Tensor[(16), int32] /* span=Const_6:0:0 */, %v_param_5: Tensor[(120, 256), int8] /* span=MatMul:0:0 */, %v_param_6: Tensor[(120), int32] /* span=Const_4:0:0 */, %v_param_7: Tensor[(84, 120), int8] /* span=MatMul_1:0:0 */, %v_param_8: Tensor[(84), int32] /* span=Const_2:0:0 */, %v_param_9: Tensor[(10, 84), int8] /* span=MatMul_2:0:0 */, %v_param_10: Tensor[(10), int32] /* span=Const:0:0 */, output_tensor_names=["PartitionedCall_0"]) {
  %0 = qnn.quantize(%serving_default_input:0, 0.00392143f /* span=tfl.quantize:0:0 */, -128 /* span=tfl.quantize:0:0 */, out_dtype="int8") /* span=tfl.quantize:0:0 */;
  %1 = reshape(%0, newshape=[1, 28, 28, 1]) /* span=transpose_11:0:0 */;
  %2 = qnn.conv2d(%1, %v_param_1, -128 /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, 0 /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, 0.00392143f /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, meta[relay.Constant][0] /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, padding=[0, 0, 0, 0], channels=6, kernel_size=[5, 5], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */;
  %3 = nn.bias_add(%2, %v_param_2, axis=3) /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */;
  %4 = qnn.requantize(%3, meta[relay.Constant][1] /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, 0 /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, 0.0196492f /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, -128 /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */, axis=3, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */;
  %5 = clip(%4, a_min=-128f, a_max=127f) /* span=onnx_tf_prefix_/relu1/Relu;Add;convolution;Const_8:0:0 */;
  %6 = nn.max_pool2d(%5, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* span=MaxPool2d:0:0 */;
  %7 = qnn.conv2d(%6, %v_param_3, -128 /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, 0 /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, 0.0196492f /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, meta[relay.Constant][2] /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, padding=[0, 0, 0, 0], channels=16, kernel_size=[5, 5], data_layout="NHWC", kernel_layout="HWIO", out_dtype="int32") /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */;
  %8 = nn.bias_add(%7, %v_param_4, axis=3) /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */;
  %9 = qnn.requantize(%8, meta[relay.Constant][3] /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, 0 /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, 0.0133176f /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, -128 /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */, axis=3, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */;
  %10 = clip(%9, a_min=-128f, a_max=127f) /* span=onnx_tf_prefix_/relu2/Relu;Add_1;convolution_1;Const_6:0:0 */;
  %11 = nn.max_pool2d(%10, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* span=MaxPool2d_1:0:0 */;
  %12 = transpose(%11, axes=[0, 3, 1, 2]) /* span=transpose_9:0:0 */;
  %13 = reshape(%12, newshape=[-1, 256]) /* span=flatten/Reshape;onnx_tf_prefix_/Reshape:0:0 */;
  %14 = reshape(%13, newshape=[-1, 256]) /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */;
  %15 = qnn.dense(%14, %v_param_5, -128 /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, 0 /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, 0.0133176f /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, 0.00173046f /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, units=120, out_dtype="int32") /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */;
  %16 = nn.bias_add(%15, %v_param_6) /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */;
  %17 = qnn.requantize(%16, 2.30457e-05f /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, 0 /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, 0.0100192f /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, -128 /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */;
  %18 = clip(%17, a_min=-128f, a_max=127f) /* span=MatMul;onnx_tf_prefix_/relu3/Relu;add_3:0:0 */;
  %19 = reshape(%18, newshape=[-1, 120]) /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */;
  %20 = qnn.dense(%19, %v_param_7, -128 /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, 0 /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, 0.0100192f /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, 0.00208033f /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, units=84, out_dtype="int32") /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */;
  %21 = nn.bias_add(%20, %v_param_8) /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */;
  %22 = qnn.requantize(%21, 2.08432e-05f /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, 0 /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, 0.00839576f /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, -128 /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */;
  %23 = clip(%22, a_min=-128f, a_max=127f) /* span=MatMul_1;onnx_tf_prefix_/relu4/Relu;add_4:0:0 */;
  %24 = reshape(%23, newshape=[-1, 84]) /* span=PartitionedCall:01:0:0 */;
  %25 = qnn.dense(%24, %v_param_9, -128 /* span=PartitionedCall:01:0:0 */, 0 /* span=PartitionedCall:01:0:0 */, 0.00839576f /* span=PartitionedCall:01:0:0 */, 0.00442651f /* span=PartitionedCall:01:0:0 */, units=10, out_dtype="int32") /* span=PartitionedCall:01:0:0 */;
  %26 = nn.bias_add(%25, %v_param_10) /* span=PartitionedCall:01:0:0 */;
  %27 = qnn.requantize(%26, 3.71639e-05f /* span=PartitionedCall:01:0:0 */, 0 /* span=PartitionedCall:01:0:0 */, 0.0145833f /* span=PartitionedCall:01:0:0 */, -128 /* span=PartitionedCall:01:0:0 */, rounding="UPWARD", compute_dtype="int64", out_dtype="int8") /* span=PartitionedCall:01:0:0 */;
  %28 = clip(%27, a_min=-128f, a_max=127f) /* span=PartitionedCall:01:0:0 */;
  qnn.dequantize(%28, 0.0145833f /* span=PartitionedCall:0:0:0 */, -128 /* span=PartitionedCall:0:0:0 */) /* span=PartitionedCall:0:0:0 */
}

